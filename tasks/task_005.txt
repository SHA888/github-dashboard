# Task ID: 5
# Title: Implement Backend REST API Endpoints
# Status: pending
# Dependencies: 4
# Priority: high
# Description: Develop the custom REST API endpoints for data retrieval and management, including authentication, organizations, repositories, and activities.
# Details:
Design and implement RESTful API using Actix-web with the following endpoints: /api/user (GET), /api/organizations (GET), /api/organizations/{id} (GET), /api/repositories (GET with query params), /api/repositories/{id} (GET), /api/activities (GET with filtering). Implement middleware for authentication using JWT. Add pagination support for list endpoints. Implement proper error responses following REST conventions. Document API using OpenAPI/Swagger.

# Test Strategy:
Write unit tests for each endpoint. Create integration tests for API flows. Test authentication middleware. Verify pagination works correctly. Test error responses. Validate API documentation against implementation.

# Subtasks:
## 1. Set up Actix-web project structure with middleware foundation [pending]
### Dependencies: None
### Description: Create the initial Actix-web project structure with basic routing and middleware support for the REST API
### Details:
Initialize a new Actix-web project with proper directory structure. Create modules for routes, handlers, middleware, and models. Set up the basic server configuration with logging. Implement the middleware framework that will later support authentication. Create a health check endpoint (/api/health) to verify the API is running correctly. Set up error handling utilities and response formatting helpers that will be used across all endpoints.

## 2. Implement JWT authentication middleware and user endpoints [pending]
### Dependencies: 5.1
### Description: Develop the JWT authentication system and implement the user-related endpoints
### Details:
Implement JWT token generation, validation, and refresh mechanisms. Create middleware for protecting routes that require authentication. Develop the /api/user (GET) endpoint to return the authenticated user's information. Implement login and token refresh endpoints if needed. Create proper error responses for authentication failures following REST conventions. Write tests for the authentication system and user endpoints.

## 3. Implement organization endpoints with pagination [pending]
### Dependencies: 5.2
### Description: Create the endpoints for retrieving organization data with pagination support
### Details:
Implement the /api/organizations (GET) endpoint to list all organizations with pagination. Create the /api/organizations/{id} (GET) endpoint to retrieve details for a specific organization. Add filtering capabilities to the list endpoint. Ensure proper error handling for cases like organization not found. Implement pagination utilities that can be reused across other list endpoints. Write tests for the organization endpoints.

## 4. Implement repository endpoints with query parameters [pending]
### Dependencies: 5.3
### Description: Develop the endpoints for retrieving repository data with filtering and pagination
### Details:
Implement the /api/repositories (GET) endpoint with support for query parameters for filtering. Create the /api/repositories/{id} (GET) endpoint to retrieve details for a specific repository. Ensure the endpoints handle pagination correctly. Add proper validation for query parameters. Implement error handling for invalid parameters and not found cases. Write tests for the repository endpoints.

## 5. Implement activities endpoint with filtering [pending]
### Dependencies: 5.4
### Description: Create the endpoint for retrieving activity data with comprehensive filtering options
### Details:
Implement the /api/activities (GET) endpoint with support for various filtering options. Add pagination support for the activities list. Implement date range filtering for activities. Support filtering by organization, repository, and activity type. Ensure proper error handling and validation for filter parameters. Write tests for the activities endpoint with various filter combinations.

## 6. Create API documentation with OpenAPI/Swagger [pending]
### Dependencies: 5.5
### Description: Document all API endpoints using OpenAPI/Swagger and ensure consistent error responses
### Details:
Integrate OpenAPI/Swagger documentation into the Actix-web application. Document all endpoints, request parameters, and response schemas. Create examples for each endpoint. Document error responses and status codes. Ensure all endpoints follow consistent REST conventions for responses. Set up a Swagger UI endpoint for interactive API exploration. Verify documentation is complete and accurate for all implemented endpoints.
