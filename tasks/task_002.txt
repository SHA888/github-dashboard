# Task ID: 2
# Title: Implement Database Schema and Infrastructure
# Status: in-progress
# Dependencies: 1
# Priority: high
# Description: Set up PostgreSQL and Redis instances, design and implement the database schema for users, organizations, repositories, and activities.
# Details:
Deploy PostgreSQL 15+ and Redis 7+ instances. Create database migration scripts using SQLx to define tables for users (id, github_id, username, email, access_token, refresh_token, preferences), organizations (id, github_id, name, description, member_count), repositories (id, github_id, org_id, name, description, language, stars, forks, issues), and activities (id, user_id, repo_id, type, timestamp, data). Set up Redis for caching with appropriate TTL policies. Implement database connection pooling in the Rust backend.

# Test Strategy:
Write and execute database migration tests. Verify schema integrity with sample data. Test connection pooling under load. Validate Redis caching functionality with expiration tests.

# Subtasks:
## 1. Set up PostgreSQL 15+ instance [done]
### Dependencies: None
### Description: Deploy and configure a PostgreSQL 15+ instance for the application
### Details:
Deploy PostgreSQL 15+ using Docker or a managed service. Configure network access, security groups, and firewall rules. Create a dedicated database user with appropriate permissions. Set up connection parameters including host, port, database name, username, and password. Document connection string format for the application.

## 2. Set up Redis 7+ instance [done]
### Dependencies: None
### Description: Deploy and configure a Redis 7+ instance for caching
### Details:
Deploy Redis 7+ using Docker or a managed service. Configure memory limits, persistence options, and network access. Define cache eviction policies and maximum memory usage. Set up monitoring for cache hit/miss rates. Document connection parameters for the application.

## 3. Design database schema and create migration scripts [in-progress]
### Dependencies: 2.1
### Description: Create SQLx migration scripts for all required database tables
### Details:
Create SQLx migration scripts for the following tables: users (id, github_id, username, email, access_token, refresh_token, preferences), organizations (id, github_id, name, description, member_count), repositories (id, github_id, org_id, name, description, language, stars, forks, issues), and activities (id, user_id, repo_id, type, timestamp, data). Include appropriate indexes, foreign key constraints, and data types. Ensure all timestamps use UTC. Add created_at and updated_at fields to all tables.

## 4. Implement database connection pooling [pending]
### Dependencies: 2.1, 2.3
### Description: Set up connection pooling for PostgreSQL in the Rust backend
### Details:
Implement connection pooling using SQLx's Pool functionality. Configure appropriate pool size based on expected load. Implement graceful connection handling including timeout policies, retry logic, and error handling. Create a database module that exports the connection pool for use throughout the application.

## 5. Implement Redis caching layer [pending]
### Dependencies: 2.2
### Description: Create a Redis client with appropriate TTL policies
### Details:
Implement Redis client using redis-rs crate. Create a caching module with functions for get, set, and invalidate operations. Implement TTL policies for different types of cached data: short TTL (5 minutes) for frequently changing data like activity feeds, medium TTL (1 hour) for semi-static data like repository information, and long TTL (24 hours) for relatively static data like user profiles. Implement cache key generation strategy.

## 6. Create database access layer [pending]
### Dependencies: 2.3, 2.4
### Description: Implement repository pattern for database access
### Details:
Create repository structs for each entity (UserRepository, OrganizationRepository, RepositoryRepository, ActivityRepository). Implement CRUD operations for each entity. Use SQLx for type-safe queries. Implement pagination for list operations. Add error handling and logging. Create integration tests for each repository.

## 7. Integrate caching with database access [pending]
### Dependencies: 2.5, 2.6
### Description: Combine the database and caching layers for efficient data access
### Details:
Modify repository implementations to check cache before database access. Update cache after database writes. Implement cache invalidation strategies for entity updates and deletes. Add cache warming for frequently accessed data. Create a unified data access interface that transparently handles caching. Implement metrics for cache hit/miss rates and database query times.
