# Task ID: 3
# Title: Implement GitHub OAuth Authentication
# Status: in-progress
# Dependencies: 2
# Priority: high
# Description: Develop the authentication flow using GitHub OAuth, including token management and user session handling.
# Details:
Register OAuth application with GitHub. Implement OAuth flow endpoints in Actix-web backend: /auth/github, /auth/github/callback. Store tokens securely in the database with encryption. Implement JWT generation for authenticated sessions. Create token refresh mechanism. Set up proper scopes for GitHub API access (read:org, read:user, repo). Implement frontend authentication components including login button and session management using Redux.

# Test Strategy:
Test OAuth flow with mock GitHub responses. Verify token storage security. Test JWT validation and expiration. Ensure proper error handling for authentication failures. Test token refresh mechanism.

# Subtasks:
## 1. Register GitHub OAuth Application [done]
### Dependencies: None
### Description: Create and configure a GitHub OAuth application to obtain client ID and secret
### Details:
Register a new OAuth application in GitHub Developer Settings. Configure the application with appropriate callback URL (http://localhost:3000/auth/github/callback for development). Set required scopes (read:org, read:user, repo). Store the client ID and secret securely in environment variables. Document the OAuth application details for team reference.

## 2. Implement Database Schema for OAuth Tokens [done]
### Dependencies: None
### Description: Design and implement database tables to securely store OAuth tokens with encryption
### Details:
Create a users table with GitHub-specific fields (github_id, username). Create an oauth_tokens table with fields for access_token, refresh_token, token_type, scope, and expiry. Implement encryption for token storage using a library like ring or sodiumoxide. Set up database migrations using diesel or sqlx. Add indexes for efficient token lookup. Document the schema design and encryption approach.

## 3. Implement Backend OAuth Flow Endpoints [done]
### Dependencies: 3.1, 3.2
### Description: Create Actix-web routes to handle the GitHub OAuth authorization flow
### Details:
Implement /auth/github endpoint to redirect users to GitHub authorization page with appropriate scopes. Create /auth/github/callback endpoint to handle the OAuth code exchange. Implement token exchange logic to convert authorization code to access token. Store tokens in the database with proper encryption. Handle error cases and edge conditions. Add logging for debugging authentication issues.

## 4. Implement JWT Session Management [in-progress]
### Dependencies: 3.3
### Description: Create JWT generation and validation for authenticated user sessions
### Details:
Implement JWT token generation for authenticated users using jsonwebtoken crate. Define JWT payload structure with user ID, roles, and expiration time. Create middleware for JWT validation on protected routes. Implement token refresh mechanism using GitHub refresh tokens. Set up proper JWT signing with secure keys. Add token blacklisting for logout functionality. Document the JWT structure and security considerations.

## 5. Develop Frontend Authentication Components [pending]
### Dependencies: 3.4
### Description: Create React components for the authentication flow and user session management
### Details:
Implement a GitHub login button component that redirects to the backend /auth/github endpoint. Create authentication context/provider using React Context API. Set up Redux store with authentication slice for state management. Implement protected route components that redirect unauthenticated users. Add local storage for persisting authentication state. Create user profile display component showing GitHub information. Implement logout functionality.

## 6. Implement Token Refresh and Session Management [pending]
### Dependencies: 3.4, 3.5
### Description: Create mechanisms to handle token expiration, refresh, and session persistence
### Details:
Implement automatic token refresh when access tokens expire. Create API interceptors to handle 401 responses by triggering token refresh. Implement secure session timeout and extension logic. Add session revocation on logout. Create background token validation to ensure sessions remain valid. Implement proper error handling for authentication failures. Add comprehensive testing for the authentication flow including edge cases. Document the complete authentication flow for developers.
